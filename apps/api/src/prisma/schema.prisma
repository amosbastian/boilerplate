// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String        @id @default(cuid())
  stripeCustomerId String?       @unique
  name             String?
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  subscription     Subscription?
  accounts         Account[]
  sessions         Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Stripe

enum PriceType {
  ONE_TIME   @map(name: "one_time")
  RECURRING  @map(name: "recurring")
}

model Price {
  id         String    @id
  active     Boolean
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  unitAmount Int       @map(name: "unit_amount")
  type       PriceType
  recurring  Json
  metadata   Json
  currency   String    @db.VarChar(3)
}

model Product {
  id            String         @id
  name          String
  active        Boolean
  image         String
  metadata      Json
  subscriptions Subscription[]
  price         Price?
}

enum SubscriptionStatus {
  ACTIVE              @map(name: "active")
  PAST_DUE            @map(name: "past_due")
  UNPAID              @map(name: "unpaid")
  CANCELLED           @map(name: "canceled")
  INCOMPLETE          @map(name: "incomplete")
  INCOMPLETE_EXPIRED  @map(name: "incomplete_expired")
  TRIALLING           @map(name: "trialing")
}

model Subscription {
  id                 String             @id
  user               User               @relation(fields: [userId], references: [id])
  userId             String
  product            Product            @relation(fields: [productId], references: [id])
  productId          String
  status             SubscriptionStatus
  amount             Int
  created            DateTime           @db.Timestamptz
  currency           String             @db.VarChar(3)
  cancelAtPeriodEnd  Boolean            @map(name: "cancel_at_period_end")
  currentPeriodEnd   DateTime           @map(name: "current_period_end") @db.Timestamptz
  currentPeriodStart DateTime           @map(name: "current_period_start") @db.Timestamptz
  trialStart         DateTime?          @map(name: "trial_start") @db.Timestamptz
  trialEnd           DateTime?          @map(name: "trial_end") @db.Timestamptz
  cancelAt           DateTime?          @map(name: "cancel_at") @db.Timestamptz
  cancelledAt        DateTime?          @map(name: "canceled_at") @db.Timestamptz
  endedAt            DateTime?          @map(name: "ended_at") @db.Timestamptz
  metadata           Json
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}
